# Verify that we can open and read the election results CSV correctly# Showing a "test-driven" stylefrom electiondata import ElectionResultsimport unittestclass ElectionResultsTest(unittest.TestCase):	def setUp(self):		self.results = ElectionResults('election_results_test_file.csv')		self.results1 = ElectionResultsWrap('election_results_test_file.csv')	def testLoad(self):		self.results.load()		assert self.results!=None		assert self.results.file!=None	def testLoad1(self):		self.results1.load()		assert self.results1!=None		assert self.results1.file!=None				def testStateCount(self):	  self.results.load()	  state_count = self.results.state_count()	  assert state_count==2	def testStates(self):	  self.results.load()	  names = self.results.states()	  assert len(names)==2	  assert names[0]=='Alaska'	  assert names[1]=='Alabama'	def testCand(self):		self.results.load()		cand_count = self.results.candidates_count()		print cand_count    def testFile(self):    	self.results1.load()    	assert self.results1.file != None    def get_fileData(self):    	self.results1.load()		assert self.results1.all_lines != None		print self.results1.all_lines    def get_states_vec(self):  		self.results1.load()		assert self.results1.states_vec != None		print self.results1.states_vec    def get_state_count(self):    	self.results1.load()		assert self.results1.state_count != None		print self.results1.states_vec# if this file is run directly, run the testsif __name__ == "__main__":	unittest.main()